from keyboards.responses import answer_start
from aiogram import types

import asyncio, os
from services.utils import TYPE_SERVICE_TELEGRAM_SCRAPPER, TYPE_SERVICE_WEB_PARSER, resize_image, SIZE_MB_20
from lib_fetcher_image.fetcher import FetcherImage
from aiogram.types import FSInputFile
import logging
from services.utils import TYPE_SERVICE_TELEGRAM_SCRAPPER,TYPE_SERVICE_WEB_PARSER

from keyboards.cms import main_menu, settings, auto_posting, manage_users, manage_help

class CmsHandlers:
	def __init__(self, config, bot_name, bot, list_bots):
		self.config = config	
		self.bot_name = bot_name
		self.bot = bot
		self.list_bots = list_bots
		self.fetcher = FetcherImage()

	async def start(self, message: types.Message):
		logging.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start –±–æ—Ç–∞ {self.bot_name} id: {message.from_user.id} username: {message.from_user.username}")
		if message.from_user.id in self.config.get_admin_user_id():
			await message.answer("üîî –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç CMS")
			await main_menu.start(message)
		else:
			await message.answer("üîí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")

	async def callback_handler(self, callback: types.CallbackQuery):
		logging.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã {callback.data} –±–æ—Ç–∞ {self.bot_name} id: {callback.from_user.id} username: {callback.from_user.username}")
		
		if callback.from_user.id not in self.config.get_admin_user_id():
			await callback.answer("üîí –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
			return
		
		if callback.data == "--":
			return

		# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		if callback.data == "main_menu":
			await main_menu.main_menu(callback)

		# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
		elif callback.data == "settings":
			await settings.settings(callback)
		# –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥
		elif callback.data == "auto_posting":
			await auto_posting.auto_posting(callback)
		# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
		elif callback.data == "manage_users":
			await manage_users.manage_users(callback)
		# –ü–æ–º–æ—â—å
		elif callback.data == "manage_help":
			await manage_help.manage_help(callback)

		# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
		elif callback.data == "settings_base":
			await settings.settings_base(callback)
		# –ë–æ—Ç—ã
		elif callback.data == "settings_bot_list":
			await settings.settings_bots_list(callback)
		# –õ–æ–≥–∏ –∏ –æ—Ç—á—ë—Ç—ã
		elif callback.data == "logs_reports":
			await settings.logs_reports(callback)

		# –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
		elif callback.data == "settings_language":
			await settings.settings_language(callback)
		elif callback.data == "settings_currency":
			await settings.settings_currency(callback)
		elif callback.data == "settings_timezone":
			await settings.settings_timezone(callback)
		elif callback.data == "settings_appearance":
			await settings.settings_appearance(callback)

		# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
		elif callback.data == "settings_bot_timeout":
			await settings.settings_bot_timeout(callback)
		elif callback.data == "settings_bot_channels":
			await settings.settings_bot_channels(callback)
		elif callback.data == "settings_bot_scraping_chats":
			await settings.settings_bot_scraping_chats(callback)
		elif callback.data == "settings_bot_parsing_sites":
			await settings.settings_bot_parsing_sites(callback)
		elif callback.data == "settings_bot_namefile_temp_downloaded":
			await settings.settings_bot_namefile_temp_downloaded(callback)
		elif callback.data == "settings_bot_category_name":
			await settings.settings_bot_category_name(callback)

		# –õ–æ–≥–∏ –∏ –æ—Ç—á—ë—Ç—ã
		elif callback.data == "logs_reports_logs":
			await settings.logs_reports_logs(callback)
		elif callback.data == "logs_reports_reports":
			await settings.logs_reports_reports(callback)
		
		# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
		elif callback.data == "manage_users_add":
			await manage_users.manage_users_add(callback)
		elif callback.data == "manage_users_delete":
			await manage_users.manage_users_delete(callback)

		# –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		elif callback.data == "manage_users_add_id":
			await manage_users.manage_users_add_id(callback)
		elif callback.data == "manage_users_add_username":
			await manage_users.manage_users_add_username(callback)

		# –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		elif callback.data == "manage_users_delete_id":
			await manage_users.manage_users_delete_id(callback)
		elif callback.data == "manage_users_delete_username":
			await manage_users.manage_users_delete_username(callback)

		# –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã
		elif callback.data == "manage_help_faq":
			await manage_help.manage_help_faq(callback)
		elif callback.data == "manage_help_faq_add":
			await manage_help.manage_help_faq_add(callback)
		elif callback.data == "manage_help_faq_delete":
			await manage_help.manage_help_faq_delete(callback)

		# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
		elif callback.data == "manage_help_documentation":
			await manage_help.manage_help_documentation(callback)
		elif callback.data == "manage_help_documentation_add":
			await manage_help.manage_help_documentation_add(callback)
		elif callback.data == "manage_help_documentation_delete":
			await manage_help.manage_help_documentation_delete(callback)

		# –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
		elif callback.data == "manage_help_feedback":
			await manage_help.manage_help_feedback(callback)
		elif callback.data == "manage_help_feedback_add":
			await manage_help.manage_help_feedback_add(callback)
		elif callback.data == "manage_help_feedback_delete":
			await manage_help.manage_help_feedback_delete(callback)

		# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º
		elif callback.data == "manage_auto_posting":
			await auto_posting.manage_auto_posting(callback)
		elif callback.data == "history_runs_auto_posting":
			await auto_posting.history_runs_auto_posting(callback)
		elif callback.data == "statistics_auto_posting":
			await auto_posting.statistics_auto_posting(callback)

		elif callback.data == "manage_auto_posting_group_off":
			self.config.switch_status_all_bots_FALSE()
			await auto_posting.manage_auto_posting(callback)

		elif callback.data == "manage_auto_posting_group_on":
			self.config.switch_status_all_bots_TRUE()
			for bot in self.list_bots:
				if bot in ['cms','global']:
					continue
				if bot.service.type_service == TYPE_SERVICE_TELEGRAM_SCRAPPER:
					await self.posting_telegram_scrapper(callback, bot)
				elif bot.service.type_service == TYPE_SERVICE_WEB_PARSER:
					await self.posting_web_parser(callback, bot)
				# await auto_posting.manage_auto_posting(callback)

		elif callback.data == "manage_auto_posting_select_bot":
			await auto_posting.manage_auto_posting_select_bot(callback)


		# –ü–æ–º–æ—â—å
		elif callback.data == "manage_help":
			await manage_help.manage_help(callback)


	async def posting_telegram_scrapper(self, callback, bot):
		logging.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –±–æ—Ç–∞ {bot.bot_name}")
		if self.config.get_status(bot.bot_name):
			await callback.message.answer(f"üåê –ü–æ–∏—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}")
			counter_updates = 0
			content_list = await bot.service.get_last_messages(bot.bot_name)
			if content_list:
				logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(content_list)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}")
				await callback.message.answer(f"üîî –ù–∞–π–¥–µ–Ω–æ {len(content_list)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}")
				for message in content_list:
					counter_updates += 1
					# await responses.answer_panel_bot(callback, bot.bot_name, counter_updates)
					if message.text:
						if not self.config.get_status(bot.bot_name):
							return
						try:	
							await bot.bot.send_message(self.config.get_channel_chat_id(bot.bot_name), message.text)
							await asyncio.sleep(self.config.get_delay_seconds())
						except Exception as e:
							logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e} –≤ –±–æ—Ç–µ {bot.bot_name}")
							await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e} –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}")
							self.config.switch_status(bot.bot_name)
							# await responses.answer_panel_bot(callback, bot.bot_name)
				self.config.switch_status(bot.bot_name)
				logging.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}")
				await callback.message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}")
				# await responses.answer_panel_bot(callback, bot.bot_name)
			else:
				logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}")
				await callback.message.answer(f"‚òëÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}")
				self.config.switch_status(bot.bot_name)
				# await responses.answer_panel_bot(callback, bot.bot_name)
		else:
			logging.info(f"–ë–æ—Ç {bot.bot_name} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
			await callback.message.answer(f"‚ùå –ë–æ—Ç {bot.bot_name} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
		
	async def posting_web_parser(self, callback, bot):
		logging.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –±–æ—Ç–∞ {bot.bot_name}")
		if self.config.get_status(bot.bot_name):
			await callback.message.answer(f"üåê –ü–æ–∏—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}")
			counter_updates = 0	
			try:
				files_list = await bot.service.get_random_files()
			except Exception as e:
				logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}: {e}")
				await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}: {e} –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
				return
			if files_list:
				logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(files_list)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}")
				await callback.message.answer(f"üîî –ù–∞–π–¥–µ–Ω–æ {len(files_list)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}")
				for file in files_list:
					new_name_file = f"{bot.bot_name}_{file.split('/')[-1]}"
					try:
						self.fetcher.download(file, new_name_file)
						if os.path.getsize(new_name_file) > SIZE_MB_20:
							compress_image(new_name_file)
						await bot.bot.send_photo(self.config.get_channel_chat_id(bot.bot_name), photo=FSInputFile(new_name_file))
						await asyncio.sleep(self.config.get_delay_seconds())
						counter_updates += 1
						# await responses.answer_panel_bot(callback, bot.bot_name, counter_updates)
						os.remove(new_name_file)
					except Exception as e:
						logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}, file: {new_name_file} –≤ –±–æ—Ç–µ {bot.bot_name}")
						await callback.message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}, file: {new_name_file} –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}")
						# await responses.answer_panel_bot(callback, bot.bot_name)
						continue
				self.config.switch_status(bot.bot_name)
				logging.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}")
				await callback.message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}")
				# await responses.answer_panel_bot(callback, bot.bot_name)
			else:
				logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}")
				await callback.message.answer(f"‚òëÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –±–æ—Ç–∞ {bot.bot_name}")
				self.config.switch_status(bot.bot_name)
				# await responses.answer_panel_bot(callback, bot.bot_name)
		else:
			logging.info(f"–ë–æ—Ç {bot.bot_name} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
			await callback.message.answer(f"‚ùå –ë–æ—Ç {bot.bot_name} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")

